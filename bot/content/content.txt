Identifiers must use only ASCII letters, digits, underscores (for constants and structured test method names), and the _'\('_ sign. Thus each valid identifier name is matched by the regular expression _`[\)\w]+`_.

**Abbreviations**: Treat abbreviations like acronyms in names as whole words, i.e. use _loadHttpUrl_, not _loadHTTPURL_, unless required by a platform name (e.g. _XMLHttpRequest_).

**Dollar sign**: Identifiers should not generally use $, except when aligning with naming conventions for third party frameworks.

**Type parameters**: Type parameters, like in _Array<T>_, may use a single upper case character ( _T_ ) or _UpperCamelCase_.

**Test names**: Test method names in Closure _testSuites_ and similar xUnit-style test frameworks may be structured with _ separators, e.g. _testX_whenY_doesZ()_.

**_** prefix/suffix: Identifiers must not use _ as a prefix or suffix. This also means that _ must not be used as an identifier by itself (e.g. to indicate a parameter is unused).

If you only need some of the elements from an array (or TypeScript tuple), you can insert extra commas in a destructuring statement to ignore in-between elements: _const [a, , b] = [1, 5, 10];  // a <- 1, b <- 10_

Module namespace imports are lowerCamelCase while files are snake_case, which means that imports correctly will not match in casing style, such as _import * as fooBar from './foo_bar';_

**Constants**: CONSTANT_CASE indicates that a value is intended to not be changed, and may be used for values that can technically be modified (i.e. values that are not deeply frozen) to indicate to users that they must not be modified. A constant can also be a static readonly property of a class. If a value can be instantiated more than once over the lifetime of the program, or if users mutate it in any way, it must use _lowerCamelCase_. If a value is an arrow function that implements an interface, then it can be declared _lowerCamelCase_.

When creating a local-scope alias of an existing symbol, use the format of the existing identifier. The local alias must match the existing naming and format of the source. For variables use _const_ for your local aliases, and for class fields use the _readonly_ attribute.

TypeScript expresses information in types, so names should not be decorated with information that is included in the type. 
Some concrete examples of this rule:
- Do not use trailing or leading underscores for private properties or methods.
- Do not use the opt_ prefix for optional parameters. 
- Do not mark interfaces specially (IMyInterface or MyFooInterface) unless it's idiomatic in its environment. When introducing an interface for a class, give it a name that expresses why the interface exists in the first place (e.g. class TodoItem and interface TodoItemStorage if the interface expresses the format used for storage/serialization in JSON). 
- Suffixing Observables with $ is a common external convention and can help resolve confusion regarding observable values vs concrete values. Judgement on whether this is a useful convention is left up to individual teams, but should be consistent within projects.

Names must be descriptive and clear to a new reader. Do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word. 
**Exception**: Variables that are in scope for 10 lines or fewer, including arguments that are not part of an exported API, may use short (e.g. single letter) variable names.

For non-ASCII characters, use the actual Unicode character (e.g. âˆž). For non-printable characters, the equivalent hex or Unicode escapes (e.g. \u221e) can be used along with an explanatory comment.

There are two types of comments, JSDoc (/** ... */) and non-JSDoc ordinary comments (// ... or /* ... */).
- Use /** JSDoc */ comments for documentation, i.e. comments a user of the code should read.
- Use // line comments for implementation comments, i.e. comments that only concern the implementation of the code itself.
JSDoc comments are understood by tools (such as editors and documentation generators), while ordinary comments are only for other humans.

Document all top-level exports of modules
Use /** JSDoc */ comments to communicate information to the users of your code. Avoid merely restating the property or parameter name. You should also document all properties and methods (exported/public or not) whose purpose is not immediately obvious from their name, as judged by your reviewer.
**Exception**: Symbols that are only exported to be consumed by tooling, such as @NgModule classes, do not require comments.

Omit comments that are redundant with TypeScript
For example, do not declare types in @param or @return blocks, do not write @implements, @enum, @private etc. on code that uses the implements, enum, private etc. keywords.

Do not use @override in TypeScript source code.
@override is not enforced by the compiler, which is surprising and leads to annotations and implementation going out of sync. Including it purely for documentation purposes is confusing.

Make comments that actually add information
For non-exported symbols, sometimes the name and type of the function or parameter is enough. Code will usually benefit from more documentation than just variable names though!
- Avoid comments that just restate the parameter name and type, e.g.
/** @param fooBarService The Bar service for the Foo application. */
- Because of this rule, @param and @return lines are only required when they add information, and may otherwise be omitted.

Parameter property comments
A parameter property is when a class declares a field and a constructor parameter in a single declaration, by marking a parameter in the constructor. E.g. constructor(private readonly foo: Foo), declares that the class has a foo field.
To document these fields, use JSDoc's @param annotation. Editors display the description on constructor calls and property accesses.

Comments when calling a function
If needed, document parameters at call sites inline using block comments. Also consider named parameters using object literals and destructuring. The exact formatting and placement of the comment is not prescribed.

Place documentation prior to decorators
When a class, method, or property have both decorators like @Component and JsDoc, please make sure to write the JsDoc before the decorator.
- Do not write JsDoc between the Decorator and the decorated statement.
- Write the JsDoc block before the Decorator.

Visibility
Restricting visibility of properties, methods, and entire types helps with keeping code decoupled.
- Limit symbol visibility as much as possible.
- Consider converting private methods to non-exported functions within the same file but outside of any class, and moving private properties into a separate, non-exported class.
- TypeScript symbols are public by default. Never use the public modifier except when declaring non-readonly public parameter properties (in constructors).

Constructors
Constructor calls must use parentheses, even when no arguments are passed:
It is unnecessary to provide an empty constructor or one that simply delegates into its parent class because ES2015 provides a default class constructor if one is not specified. However constructors with parameter properties, modifiers or parameter decorators should not be omitted even if the body of the constructor is empty.

No #private fields
Do not use private fields (also known as private identifiers), Instead, use TypeScript's visibility annotations. Why? Private identifiers cause substantial emit size and performance regressions when down-leveled by TypeScript, and are unsupported before ES2015. They can only be downleveled to ES2015, not lower. At the same time, they do not offer substantial benefits when static type checking is used to enforce visibility.

Use readonly
Mark properties that are never reassigned outside of the constructor with the readonly modifier (these need not be deeply immutable).

Parameter properties
Rather than plumbing an obvious initializer through to a class member, use a TypeScript parameter property.
If the parameter property needs documentation, use an @param JSDoc tag.

Field initializers
If a class member is not a parameter, initialize it where it's declared, which sometimes lets you drop the constructor entirely.

Properties used outside of class lexical scope
Properties used from outside the lexical scope of their containing class, such as an AngularJS controller's properties used from a template, must not use private visibility, as they are used outside of the lexical scope of their containing class.
Prefer public visibility for these properties, however protected visibility can also be used as needed. For example, Angular and Polymer template properties should use public, but AngularJS should use protected.
TypeScript code must not not use obj['foo'] to bypass the visibility of a property
Why?
When a property is private, you are declaring to both automated systems and humans that the property accesses are scoped to the methods of the declaring class, and they will rely on that. For example, a check for unused code will flag a private property that appears to be unused, even if some other file manages to bypass the visibility restriction.
Though it may appear that obj['foo'] can bypass visibility in the TypeScript compiler, this pattern can be broken by rearranging the build rules, and also violates optimization compatibility.

Getters and Setters (Accessors)
Getters and setters for class members may be used. The getter method must be a pure function (i.e., result is consistent and has no side effects). They are also useful as a means of restricting the visibility of internal or verbose implementation details (shown below).
If an accessor is used to hide a class property, the hidden property may be prefixed or suffixed with any whole word, like internal or wrapped. When using these private properties, access the value through the accessor whenever possible. At least one accessor for a property must be non-trivial: do not define pass-through accessors only for the purpose of hiding a property. Instead, make the property public (or consider making it readonly rather than just defining a getter with no setter).

Primitive Types & Wrapper Classes
TypeScript code must not instantiate the wrapper classes for the primitive types String, Boolean, and Number. Wrapper classes have surprising behaviour, such as new Boolean(false) evaluating to true.

TypeScript code must not use the Array() constructor, with or without new. It has confusing and contradictory usage:
_const a = new Array(2); // [undefined, undefined]_
_const b = new Array(2, 3); // [2, 3];_
Instead, always use bracket notation to initialize arrays, or from to initialize an Array with a certain size:
_const a = [2];_
_const b = [2, 3];_
// Equivalent to Array(2):
_const c = [];_
_c.length = 2;_
// [0, 0, 0, 0, 0]
_Array.from<number>({length: 5}).fill(0);_

Always use const or let to declare variables. Use const by default, unless a variable needs to be reassigned. Never use var.

Always use new Error() when instantiating exceptions, instead of just calling Error(). Both forms create a new Error instance, but using new is more consistent with how other objects are instantiated.

Iterating objects with for (... in ...) is error prone. It will include enumerable properties from the prototype chain.
Do not use unfiltered for (... in ...) statements:
Either filter values explicitly with an if statement, or use for (... of Object.keys(...)).

Do not use for (... in ...) to iterate over arrays. It will counterintuitively give the array's indices (as strings!), not values:
Use for (... of someArr) or vanilla for loops with indices to iterate over arrays.
Do not use Array.prototype.forEach, Set.prototype.forEach, and Map.prototype.forEach. They make code harder to debug and defeat some useful compiler checks (e.g. reachability).
Why?
Consider this code:
_let x: string|null = 'abc';_
_myArray.forEach(() => { x.charAt(0); });_
You can recognize that this code is fine: x isn't null and it doesn't change before it is accessed. But the compiler cannot know that this .forEach() call doesn't hang on to the closure that was passed in and call it at some later point, maybe after x was set to null, so it flags this code as an error. The equivalent for-of loop is fine.

Using the spread operator [...foo]; {...bar} is a convenient shorthand for copying arrays and objects. When using the spread operator on objects, later values replace earlier values at the same key.
When using the spread operator, the value being spread must match what is being created. That is, when creating an object, only objects may be used with the spread operator; when creating an array, only spread iterables. Primitives, including null and undefined, may never be spread.

Control flow statements spanning multiple lines always use blocks for the containing code.

All switch statements must contain a default statement group, even if it contains no code.
Non-empty statement groups (case ...) may not fall through (enforced by the compiler):
Empty statement groups are allowed to fall through:

Always use triple equals (===) and not equals (!==). The double equality operators cause error prone type coercions that are hard to understand and slower to implement for JavaScript Virtual Machines. See also the JavaScript equality table.

Use function foo() { ... } to declare named functions, including functions in nested scopes, e.g. within another function.
Use function declarations instead of assigning a function expression into a local variable _(const x = function() {...};)_. TypeScript already disallows rebinding functions, so preventing overwriting a function declaration by using const is unnecessary.
Exception: Use arrow functions assigned to variables instead of function declarations if the function accesses the outer scope's this.

Always use arrow functions instead of pre-ES6 function expressions defined with the function keyword.

Function expressions (defined with the function keyword) may only be used if code has to dynamically rebind the this pointer, but code should not rebind the this pointer in general. Code in regular functions (as opposed to arrow functions and methods) should not access this.

Use arrow functions with expressions or blocks as their body as appropriate.

Only use an expression body if the return value of the function is actually used.
// BAD: use a block ({ ... }) if the return value of the function is not used.
myPromise.then(v => console.log(v));
// GOOD: return value is unused, use a block body.
myPromise.then(v => {
  console.log(v);
});
// GOOD: code may use blocks for readability.
const transformed = [1, 2, 3].map(v => {
  const intermediate = someComplicatedExpr(v);
  const more = acrossManyLines(intermediate);
  return worthWrapping(more);
});

Function expressions must not use this unless they specifically exist to rebind the this pointer. Rebinding this can in most cases be avoided by using arrow functions or explicit parameters.
function clickHandler() {
  // Bad: what's `this` in this context?
  this.textContent = 'Hello';
}
// Bad: the `this` pointer reference is implicitly set to document.body.
document.body.onclick = clickHandler;
// Good: explicitly reference the object from an arrow function.
document.body.onclick = () => { document.body.textContent = 'hello'; };
// Alternatively: take an explicit parameter
const setTextFn = (e: HTMLElement) => { e.textContent = 'hello'; };
document.body.onclick = setTextFn.bind(null, document.body);

Classes usually should not contain properties initialized to arrow functions. Arrow function properties require the calling function to understand that the callee's this is already bound, which increases confusion about what this is, and call sites and references using such handlers look broken (i.e. require non-local knowledge to determine that they are correct). Code should always use arrow functions to call instance methods (const handler = (x) => { this.listener(x); };), and should not obtain or pass references to instance methods (const handler = this.listener; handler(x);).

Event handlers may use arrow functions when there is no need to uninstall the handler (for example, if the event is emitted by the class itself). If the handler must be uninstalled, arrow function properties are the right approach, because they automatically capture this and provide a stable reference to uninstall.

Do not use bind in the expression that installs an event handler, because it creates a temporary reference that can't be uninstalled.

Do not rely on Automatic Semicolon Insertion (ASI). Explicitly terminate all statements using a semicolon. This prevents bugs due to incorrect semicolon insertions and ensures compatibility with tools with limited ASI support (e.g. clang-format).

Do not use @ts-ignore. It superficially seems to be an easy way to fix a compiler error, but in practice, a specific compiler error is often caused by a larger problem that can be fixed more directly.
For example, if you are using @ts-ignore to suppress a type error, then it's hard to predict what types the surrounding code will end up seeing. For many type errors, the advice in how to best use any is useful.

Type assertions (x as SomeType) and non-nullability assertions (y!) are unsafe. Both only silence the TypeScript compiler, but do not insert any runtime checks to match these assertions, so they can cause your program to crash at runtime.
Because of this, you should not use type and non-nullability assertions without an obvious or explicit reason for doing so.
Instead of the following:
(x as Foo).foo();
y!.bar();
When you want to assert a type or non-nullability the best answer is to explicitly write a runtime check that performs that check.
// assuming Foo is a class.
if (x instanceof Foo) {
  x.foo();
}
if (y) {
  y.bar();
}
Sometimes due to some local property of your code you can be sure that the assertion form is safe. In those situations, you should add clarification to explain why you are ok with the unsafe behavior:
// x is a Foo, because ...
(x as Foo).foo();
// y cannot be null, because ...
y!.bar();
If the reasoning behind a type or non-nullability assertion is obvious, the comments may not be necessary. For example, generated proto code is always nullable, but perhaps it is well-known in the context of the code that certain fields are always provided by the backend. Use your judgement.

Type assertions must use the as syntax (as opposed to the angle brackets syntax). This enforces parentheses around the assertion when accessing a member.

Use type annotations (: Foo) instead of type assertions (as Foo) to specify the type of an object literal. This allows detecting refactoring bugs when the fields of an interface change over time.

Interface and class declarations must use the ; character to separate individual member declarations:

Inline object type declarations must use the comma as a separator:

Code must not mix quoted property access with dotted property access:
// Bad: code must use either non-quoted or quoted access for any property
// consistently across the entire application:
console.log(x['someField']);
console.log(x.someField);

Code must not rely on disabling renaming, but must rather declare all properties that are external to the application to prevent renaming:
Prefer for code to account for a possible property-renaming optimization, and declare all properties that are external to the application to prevent renaming:
// Good: declaring an interface
declare interface ServerInfoJson {
  appVersion: string;
  user: UserJson;
}
const data = JSON.parse(serverResponse) as ServerInfoJson;
console.log(data.appVersion); // Type safe & renaming safe!

When importing a module object, directly access properties on the module object rather than passing it around. This ensures that modules can be analyzed and optimized. Treating module imports as namespaces is fine.
import {method1, method2} from 'utils';
class A {
  readonly utils = {method1, method2};
}
import * as utils from 'utils';
class A {
  readonly utils = utils;
}

This optimization compatibility rule applies to all web apps. It does not apply to code that only runs server side (e.g. in NodeJS for a test runner). It is still strongly encouraged to always declare all types and avoid mixing quoted and unquoted property access, for code hygiene.

TypeScript code must use paths to import other TypeScript code. Paths may be relative, i.e. starting with . or .., or rooted at the base directory, e.g. root/path/to/file.
Code should use relative imports (./foo) rather than absolute imports path/to/foo when referring to files within the same (logical) project.
Consider limiting the number of parent steps (../../../) as those can make module and path structures hard to understand.

TypeScript supports two methods to organize code: namespaces and modules, but namespaces are disallowed. google3 code must use TypeScript modules (which are ECMAScript 6 modules). That is, your code must refer to code in other files using imports and exports of the form import {foo} from 'bar';
Your code must not use the namespace Foo { ... } construct. namespaces may only be used when required to interface with external, third party code. To semantically namespace your code, use separate files.
Code must not use require (as in import x = require('...');) for imports. Use ES6 module syntax.

Use named exports in all code:
// Use named exports:
export class Foo { ... }
Do not use default exports. This ensures that all imports follow a uniform pattern.
// Do not use default exports:
export default class Foo { ... } // BAD!
Why?
Default exports provide no canonical name, which makes central maintenance difficult with relatively little benefit to code owners, including potentially decreased readability:
import Foo from './bar';  // Legal.
import Bar from './bar';  // Also legal.
Named exports have the benefit of erroring when import statements try to import something that hasn't been declared. In foo.ts:
const foo = 'blah';
export default foo;
And in bar.ts:
import {fizz} from './foo';
Results in error TS2614: Module '"./foo"' has no exported member 'fizz'. While bar.ts:
import fizz from './foo';
Results in fizz === foo, which is probably unexpected and difficult to debug.
Additionally, default exports encourage people to put everything into one big object to namespace it all together:
export default class Foo {
  static SOME_CONSTANT = ...
  static someHelpfulFunction() { ... }
  ...
}
With the above pattern, we have file scope, which can be used as a namespace. We also have a perhaps needless second scope (the class Foo) that can be ambiguously used as both a type and a value in other files.
Instead, prefer use of file scope for namespacing, as well as named exports:
export const SOME_CONSTANT = ...
export function someHelpfulFunction()
export class Foo {
  // only class stuff here
}

TypeScript does not support restricting the visibility for exported symbols. Only export symbols that are used outside of the module. Generally minimize the exported API surface of modules.

Regardless of technical support, mutable exports can create hard to understand and debug code, in particular with re-exports across multiple modules. One way to paraphrase this style point is that export let is not allowed.

Do not create container classes with static methods or properties for the sake of namespacing.
export class Container {
  static FOO = 1;
  static bar() { return 1; }
}
Instead, export individual constants and functions:
export const FOO = 1;
export function bar() { return 1; }

Both module and destructuring imports have advantages depending on the situation.
Despite the *, a module import is not comparable to a wildcard import as seen in other languages. Instead, module imports give a name to the entire module and each symbol reference mentions the module, which can make code more readable and gives autocompletion on all symbols in a module. They also require less import churn (all symbols are available), fewer name collisions, and allow terser names in the module that's imported. Module imports are particularly useful when using many different symbols from large APIs.
Destructuring imports give local names for each imported symbol. They allow terser code when using the imported symbol, which is particularly useful for very commonly used symbols, such as Jasmine's describe and it.

Code should fix name collisions by using a module import or renaming the exports themselves. Code may rename imports (import {SomeThing as SomeOtherThing}) if needed.
Three examples where renaming can be helpful:
- If it's necessary to avoid collisions with other imported symbols.
- If the imported symbol name is generated.
- If importing symbols whose names are unclear by themselves, renaming can improve code clarity. For example, when using RxJS the from function might be more readable when renamed to observableFrom.

Do not use import type ... from or export type ... from.
Instead, just use regular imports:

Organize packages by feature, not by type. For example, an online shop should have packages named products, checkout, backend, not views, models, controllers.

Code may rely on type inference as implemented by the TypeScript compiler for all type expressions (variables, fields, return types, etc). The google3 compiler flags reject code that does not have a type annotation and cannot be inferred, so all code is guaranteed to be typed (but might use the any type explicitly).

Leave out type annotations for trivially inferred types: variables or parameters initialized to a string, number, boolean, RegExp literal or new expression.

Whether to include return type annotations for functions and methods is up to the code author. Reviewers may ask for annotations to clarify complex return types that are hard to understand. Projects may have a local policy to always require return types, but this is not a general TypeScript style requirement.
There are two benefits to explicitly typing out the implicit return values of functions and methods:
- More precise documentation to benefit readers of the code.
- Surface potential type errors faster in the future if there are code changes that change the return type of the function.

TypeScript supports null and undefined types. Nullable types can be constructed as a union type (string|null); similarly with undefined. There is no special syntax for unions of null and undefined.

TypeScript code can use either undefined or null to denote absence of a value, there is no general guidance to prefer one over the other. Many JavaScript APIs use undefined (e.g. Map.get), while many DOM and Google APIs use null (e.g. Element.getAttribute), so the appropriate absent value depends on the context.

Type aliases must not include |null or |undefined in a union type. Nullable aliases typically indicate that null values are being passed around through too many layers of an application, and this clouds the source of the original issue that resulted in null. They also make it unclear when specific values on a class or interface might be absent.
Instead, code must only add |null or |undefined when the alias is actually used. Code should deal with null values close to where they arise, using the above techniques.

In addition, TypeScript supports a special construct for optional parameters and fields, using ?:
interface CoffeeOrder {
  sugarCubes: number;
  milk?: Whole|LowFat|HalfHalf;
}
function pourCoffee(volume?: Milliliter) { ... }

TypeScript's type system is structural, not nominal. That is, a value matches a type if it has at least all the properties the type requires and the properties' types match, recursively.
Use structural typing where appropriate in your code. Outside of test code, use interfaces to define structural types, not classes. In test code it can be useful to have mock implementations structurally match the code under test without introducing an extra interface.
When providing a structural-based implementation, explicitly include the type at the declaration of the symbol (this allows more precise type checking and error reporting).

TypeScript supports type aliases for naming a type expression. This can be used to name primitives, unions, tuples, and any other types.
However, when declaring types for objects, use interfaces instead of a type alias for the object literal expression.
These forms are nearly equivalent, so under the principle of just choosing one out of two forms to prevent variation, we should choose one. Additionally, there also interesting technical reasons to prefer interface. That page quotes the TypeScript team lead: Honestly, my take is that it should really just be interfaces for anything that they can model. There is no benefit to type aliases when there are so many issues around display/perf.

For simple types (containing just alphanumeric characters and dot), use the syntax sugar for arrays, T[], rather than the longer form Array<T>.
For anything more complex, use the longer form Array<T>.
This also applies for readonly T[] vs ReadonlyArray<T>.

In JavaScript, it's common to use an object as an associative array (aka map, hash, or dict):
const fileSizes: {[fileName: string]: number} = {};
fileSizes['readme.txt'] = 541;
In TypeScript, provide a meaningful label for the key. (The label only exists for documentation; it's unused otherwise.)
const users: {[userName: string]: number} = ...;
Rather than using one of these, consider using the ES6 Map and Set types instead. JavaScript objects have surprising undesirable behaviors and the ES6 types more explicitly convey your intent. Also, Maps can be keyed byâ€”and Sets can containâ€”types other than string.
TypeScript's builtin Record<Keys, ValueType> type allows constructing types with a defined set of keys. This is distinct from associative arrays in that the keys are statically known. See advice on that below.

TypeScript's any type is a super and subtype of all other types, and allows dereferencing all properties. As such, any is dangerous - it can mask severe programming errors, and its use undermines the value of having static types in the first place.
Consider not to use any. In circumstances where you want to use any, consider one of:
- Provide a more specific type
- Use unknown
- Suppress the lint warning and document why

The any type allows assignment into any other type and dereferencing any property off it. Often this behaviour is not necessary or desirable, and code just needs to express that a type is unknown. Use the built-in type unknown in that situation â€” it expresses the concept and is much safer as it does not allow dereferencing arbitrary properties.
To safely use unknown values, narrow the type using a type guard

Sometimes using any is legitimate, for example in tests to construct a mock object. In such cases, add a comment that suppresses the lint warning, and document why it is legitimate.

There are a few types related to JavaScript primitives that should never be used:
- String, Boolean, and Number have slightly different meaning from the corresponding primitive types string, boolean, and number. Always use the lowercase version.
- Object has similarities to both {} and object, but is slightly looser. Use {} for a type that include everything except null and undefined, or lowercase object to further exclude the other primitive types (the three mentioned above, plus symbol and bigint).
Further, never invoke the wrapper types as constructors (with new).

Avoid creating APIs that have return type only generics. When working with existing APIs that have return type only generics always explicitly specify the generics.

For any style question that isn't settled definitively by this specification, do what the other code in the same file is already doing (be consistent). If that doesn't resolve the question, consider emulating the other files in the same directory.